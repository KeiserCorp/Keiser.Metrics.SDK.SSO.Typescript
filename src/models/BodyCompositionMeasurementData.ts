/* tslint:disable */
/* eslint-disable */
/**
 * metrics-sdk-sso
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BodyCompositionMeasurementData
 */
export interface BodyCompositionMeasurementData {
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    totalBodyWater?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    intracellularWater?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    extracellularWater?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    extracellularWaterToTotalBodyWaterRatio?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    dryLeanMass?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    bodyFatMass?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    leanBodyMass?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    skeletalMuscleMass?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    bodyMassIndex?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    visceralFatLevel?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    basalMetabolicRate?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    leanBodyMassOfRightArm?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    leanBodyMassPercentageOfRightArm?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    leanBodyMassOfLeftArm?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    leanBodyMassPercentageOfLeftArm?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    leanBodyMassOfTrunk?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    leanBodyMassPercentageOfTrunk?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    leanBodyMassOfRightLeg?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    leanBodyMassPercentageOfRightLeg?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    leanBodyMassOfLeftLeg?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    leanBodyMassPercentageOfLeftLeg?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    bodyFatMassOfRightArm?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    bodyFatMassPercentageOfRightArm?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    bodyFatMassOfLeftArm?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    bodyFatMassPercentageOfLeftArm?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    bodyFatMassOfTrunk?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    bodyFatMassPercentageOfTrunk?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    bodyFatMassOfRightLeg?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    bodyFatMassPercentageOfRightLeg?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    bodyFatMassOfLeftLeg?: number;
    /**
     * 
     * @type {number}
     * @memberof BodyCompositionMeasurementData
     */
    bodyFatMassPercentageOfLeftLeg?: number;
}

/**
 * Check if a given object implements the BodyCompositionMeasurementData interface.
 */
export function instanceOfBodyCompositionMeasurementData(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BodyCompositionMeasurementDataFromJSON(json: any): BodyCompositionMeasurementData {
    return BodyCompositionMeasurementDataFromJSONTyped(json, false);
}

export function BodyCompositionMeasurementDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): BodyCompositionMeasurementData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'totalBodyWater': !exists(json, 'totalBodyWater') ? undefined : json['totalBodyWater'],
        'intracellularWater': !exists(json, 'intracellularWater') ? undefined : json['intracellularWater'],
        'extracellularWater': !exists(json, 'extracellularWater') ? undefined : json['extracellularWater'],
        'extracellularWaterToTotalBodyWaterRatio': !exists(json, 'extracellularWaterToTotalBodyWaterRatio') ? undefined : json['extracellularWaterToTotalBodyWaterRatio'],
        'dryLeanMass': !exists(json, 'dryLeanMass') ? undefined : json['dryLeanMass'],
        'bodyFatMass': !exists(json, 'bodyFatMass') ? undefined : json['bodyFatMass'],
        'leanBodyMass': !exists(json, 'leanBodyMass') ? undefined : json['leanBodyMass'],
        'skeletalMuscleMass': !exists(json, 'skeletalMuscleMass') ? undefined : json['skeletalMuscleMass'],
        'bodyMassIndex': !exists(json, 'bodyMassIndex') ? undefined : json['bodyMassIndex'],
        'visceralFatLevel': !exists(json, 'visceralFatLevel') ? undefined : json['visceralFatLevel'],
        'basalMetabolicRate': !exists(json, 'basalMetabolicRate') ? undefined : json['basalMetabolicRate'],
        'leanBodyMassOfRightArm': !exists(json, 'leanBodyMassOfRightArm') ? undefined : json['leanBodyMassOfRightArm'],
        'leanBodyMassPercentageOfRightArm': !exists(json, 'leanBodyMassPercentageOfRightArm') ? undefined : json['leanBodyMassPercentageOfRightArm'],
        'leanBodyMassOfLeftArm': !exists(json, 'leanBodyMassOfLeftArm') ? undefined : json['leanBodyMassOfLeftArm'],
        'leanBodyMassPercentageOfLeftArm': !exists(json, 'leanBodyMassPercentageOfLeftArm') ? undefined : json['leanBodyMassPercentageOfLeftArm'],
        'leanBodyMassOfTrunk': !exists(json, 'leanBodyMassOfTrunk') ? undefined : json['leanBodyMassOfTrunk'],
        'leanBodyMassPercentageOfTrunk': !exists(json, 'leanBodyMassPercentageOfTrunk') ? undefined : json['leanBodyMassPercentageOfTrunk'],
        'leanBodyMassOfRightLeg': !exists(json, 'leanBodyMassOfRightLeg') ? undefined : json['leanBodyMassOfRightLeg'],
        'leanBodyMassPercentageOfRightLeg': !exists(json, 'leanBodyMassPercentageOfRightLeg') ? undefined : json['leanBodyMassPercentageOfRightLeg'],
        'leanBodyMassOfLeftLeg': !exists(json, 'leanBodyMassOfLeftLeg') ? undefined : json['leanBodyMassOfLeftLeg'],
        'leanBodyMassPercentageOfLeftLeg': !exists(json, 'leanBodyMassPercentageOfLeftLeg') ? undefined : json['leanBodyMassPercentageOfLeftLeg'],
        'bodyFatMassOfRightArm': !exists(json, 'bodyFatMassOfRightArm') ? undefined : json['bodyFatMassOfRightArm'],
        'bodyFatMassPercentageOfRightArm': !exists(json, 'bodyFatMassPercentageOfRightArm') ? undefined : json['bodyFatMassPercentageOfRightArm'],
        'bodyFatMassOfLeftArm': !exists(json, 'bodyFatMassOfLeftArm') ? undefined : json['bodyFatMassOfLeftArm'],
        'bodyFatMassPercentageOfLeftArm': !exists(json, 'bodyFatMassPercentageOfLeftArm') ? undefined : json['bodyFatMassPercentageOfLeftArm'],
        'bodyFatMassOfTrunk': !exists(json, 'bodyFatMassOfTrunk') ? undefined : json['bodyFatMassOfTrunk'],
        'bodyFatMassPercentageOfTrunk': !exists(json, 'bodyFatMassPercentageOfTrunk') ? undefined : json['bodyFatMassPercentageOfTrunk'],
        'bodyFatMassOfRightLeg': !exists(json, 'bodyFatMassOfRightLeg') ? undefined : json['bodyFatMassOfRightLeg'],
        'bodyFatMassPercentageOfRightLeg': !exists(json, 'bodyFatMassPercentageOfRightLeg') ? undefined : json['bodyFatMassPercentageOfRightLeg'],
        'bodyFatMassOfLeftLeg': !exists(json, 'bodyFatMassOfLeftLeg') ? undefined : json['bodyFatMassOfLeftLeg'],
        'bodyFatMassPercentageOfLeftLeg': !exists(json, 'bodyFatMassPercentageOfLeftLeg') ? undefined : json['bodyFatMassPercentageOfLeftLeg'],
    };
}

export function BodyCompositionMeasurementDataToJSON(value?: BodyCompositionMeasurementData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'totalBodyWater': value.totalBodyWater,
        'intracellularWater': value.intracellularWater,
        'extracellularWater': value.extracellularWater,
        'extracellularWaterToTotalBodyWaterRatio': value.extracellularWaterToTotalBodyWaterRatio,
        'dryLeanMass': value.dryLeanMass,
        'bodyFatMass': value.bodyFatMass,
        'leanBodyMass': value.leanBodyMass,
        'skeletalMuscleMass': value.skeletalMuscleMass,
        'bodyMassIndex': value.bodyMassIndex,
        'visceralFatLevel': value.visceralFatLevel,
        'basalMetabolicRate': value.basalMetabolicRate,
        'leanBodyMassOfRightArm': value.leanBodyMassOfRightArm,
        'leanBodyMassPercentageOfRightArm': value.leanBodyMassPercentageOfRightArm,
        'leanBodyMassOfLeftArm': value.leanBodyMassOfLeftArm,
        'leanBodyMassPercentageOfLeftArm': value.leanBodyMassPercentageOfLeftArm,
        'leanBodyMassOfTrunk': value.leanBodyMassOfTrunk,
        'leanBodyMassPercentageOfTrunk': value.leanBodyMassPercentageOfTrunk,
        'leanBodyMassOfRightLeg': value.leanBodyMassOfRightLeg,
        'leanBodyMassPercentageOfRightLeg': value.leanBodyMassPercentageOfRightLeg,
        'leanBodyMassOfLeftLeg': value.leanBodyMassOfLeftLeg,
        'leanBodyMassPercentageOfLeftLeg': value.leanBodyMassPercentageOfLeftLeg,
        'bodyFatMassOfRightArm': value.bodyFatMassOfRightArm,
        'bodyFatMassPercentageOfRightArm': value.bodyFatMassPercentageOfRightArm,
        'bodyFatMassOfLeftArm': value.bodyFatMassOfLeftArm,
        'bodyFatMassPercentageOfLeftArm': value.bodyFatMassPercentageOfLeftArm,
        'bodyFatMassOfTrunk': value.bodyFatMassOfTrunk,
        'bodyFatMassPercentageOfTrunk': value.bodyFatMassPercentageOfTrunk,
        'bodyFatMassOfRightLeg': value.bodyFatMassOfRightLeg,
        'bodyFatMassPercentageOfRightLeg': value.bodyFatMassPercentageOfRightLeg,
        'bodyFatMassOfLeftLeg': value.bodyFatMassOfLeftLeg,
        'bodyFatMassPercentageOfLeftLeg': value.bodyFatMassPercentageOfLeftLeg,
    };
}

