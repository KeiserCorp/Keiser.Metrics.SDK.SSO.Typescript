/* tslint:disable */
/* eslint-disable */
/**
 * metrics-sdk-sso
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MuscleArea } from './MuscleArea';
import {
    MuscleAreaFromJSON,
    MuscleAreaFromJSONTyped,
    MuscleAreaToJSON,
} from './MuscleArea';
import type { MuscleGroup } from './MuscleGroup';
import {
    MuscleGroupFromJSON,
    MuscleGroupFromJSONTyped,
    MuscleGroupToJSON,
} from './MuscleGroup';
import type { MuscleTargetLevel } from './MuscleTargetLevel';
import {
    MuscleTargetLevelFromJSON,
    MuscleTargetLevelFromJSONTyped,
    MuscleTargetLevelToJSON,
} from './MuscleTargetLevel';

/**
 * 
 * @export
 * @interface MuscleData
 */
export interface MuscleData {
    /**
     * 
     * @type {number}
     * @memberof MuscleData
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MuscleData
     */
    muscle: MuscleDataMuscleEnum;
    /**
     * 
     * @type {MuscleGroup}
     * @memberof MuscleData
     */
    group?: MuscleGroup;
    /**
     * 
     * @type {MuscleArea}
     * @memberof MuscleData
     */
    area?: MuscleArea;
    /**
     * 
     * @type {MuscleTargetLevel}
     * @memberof MuscleData
     */
    targetLevel: MuscleTargetLevel;
}


/**
 * @export
 */
export const MuscleDataMuscleEnum = {
    Omohyoid: 'omohyoid',
    LevatorScapulae: 'levatorScapulae',
    Sternohyoid: 'sternohyoid',
    Sternocleidomastoid: 'sternocleidomastoid',
    PectoralisMajor: 'pectoralisMajor',
    PectoralisMinor: 'pectoralisMinor',
    Deltoid: 'deltoid',
    Brachialis: 'brachialis',
    BicepsBrachii: 'bicepsBrachii',
    TricepsBrachii: 'tricepsBrachii',
    PronatorTeres: 'pronatorTeres',
    PalmarisLongus: 'palmarisLongus',
    ExtensorPollicisBrevis: 'extensorPollicisBrevis',
    ExtensorPollicisLongus: 'extensorPollicisLongus',
    AbductorPollicisLongus: 'abductorPollicisLongus',
    FlexorCarpiRadialis: 'flexorCarpiRadialis',
    Brachioradialis: 'brachioradialis',
    FlexorCarpiUlnaris: 'flexorCarpiUlnaris',
    ExtensorCarpiUlnaris: 'extensorCarpiUlnaris',
    SerratusAnterior: 'serratusAnterior',
    InternalOblique: 'internalOblique',
    ExternalOblique: 'externalOblique',
    RectusAdbominis: 'rectusAdbominis',
    Transversalis: 'transversalis',
    Sartorius: 'sartorius',
    Piriformis: 'piriformis',
    Pectineus: 'pectineus',
    AdductorLongus: 'adductorLongus',
    AdductorBrevis: 'adductorBrevis',
    Gracilis: 'gracilis',
    TensorFasciaeLatae: 'tensorFasciaeLatae',
    VastusMedialis: 'vastusMedialis',
    RectusFemoris: 'rectusFemoris',
    VastusIntermedius: 'vastusIntermedius',
    VastusLateralis: 'vastusLateralis',
    Gastrocnemius: 'gastrocnemius',
    Soleius: 'soleius',
    TibialisAnterior: 'tibialisAnterior',
    TibialisPosterior: 'tibialisPosterior',
    PeroneusLongus: 'peroneusLongus',
    PeroneusBrevis: 'peroneusBrevis',
    ExtensorDigitorumLongus: 'extensorDigitorumLongus',
    FlexorHallucisLongus: 'flexorHallucisLongus',
    FlexorDigitorumLongus: 'flexorDigitorumLongus',
    Plantaris: 'plantaris',
    BicepsFemoris: 'bicepsFemoris',
    AdductorMagnus: 'adductorMagnus',
    Semitendinosus: 'semitendinosus',
    Semimembranosus: 'semimembranosus',
    GluteusMinimus: 'gluteusMinimus',
    GluteusMedius: 'gluteusMedius',
    GluteusMaximus: 'gluteusMaximus',
    PsoasMinor: 'psoasMinor',
    PsoasMajor: 'psoasMajor',
    Iliacus: 'iliacus',
    TeresMinor: 'teresMinor',
    TeresMajor: 'teresMajor',
    Infraspinatus: 'infraspinatus',
    RhomboidMinor: 'rhomboidMinor',
    RhomboidMajor: 'rhomboidMajor',
    Trapezius: 'trapezius',
    LatissimusDorsi: 'latissimusDorsi',
    Semispinalis: 'semispinalis',
    ErectorSpinae: 'erectorSpinae',
    Multifidus: 'multifidus'
} as const;
export type MuscleDataMuscleEnum = 
        | 'omohyoid' 
        | 'levatorScapulae' 
        | 'sternohyoid' 
        | 'sternocleidomastoid' 
        | 'pectoralisMajor' 
        | 'pectoralisMinor' 
        | 'deltoid' 
        | 'brachialis' 
        | 'bicepsBrachii' 
        | 'tricepsBrachii' 
        | 'pronatorTeres' 
        | 'palmarisLongus' 
        | 'extensorPollicisBrevis' 
        | 'extensorPollicisLongus' 
        | 'abductorPollicisLongus' 
        | 'flexorCarpiRadialis' 
        | 'brachioradialis' 
        | 'flexorCarpiUlnaris' 
        | 'extensorCarpiUlnaris' 
        | 'serratusAnterior' 
        | 'internalOblique' 
        | 'externalOblique' 
        | 'rectusAdbominis' 
        | 'transversalis' 
        | 'sartorius' 
        | 'piriformis' 
        | 'pectineus' 
        | 'adductorLongus' 
        | 'adductorBrevis' 
        | 'gracilis' 
        | 'tensorFasciaeLatae' 
        | 'vastusMedialis' 
        | 'rectusFemoris' 
        | 'vastusIntermedius' 
        | 'vastusLateralis' 
        | 'gastrocnemius' 
        | 'soleius' 
        | 'tibialisAnterior' 
        | 'tibialisPosterior' 
        | 'peroneusLongus' 
        | 'peroneusBrevis' 
        | 'extensorDigitorumLongus' 
        | 'flexorHallucisLongus' 
        | 'flexorDigitorumLongus' 
        | 'plantaris' 
        | 'bicepsFemoris' 
        | 'adductorMagnus' 
        | 'semitendinosus' 
        | 'semimembranosus' 
        | 'gluteusMinimus' 
        | 'gluteusMedius' 
        | 'gluteusMaximus' 
        | 'psoasMinor' 
        | 'psoasMajor' 
        | 'iliacus' 
        | 'teresMinor' 
        | 'teresMajor' 
        | 'infraspinatus' 
        | 'rhomboidMinor' 
        | 'rhomboidMajor' 
        | 'trapezius' 
        | 'latissimusDorsi' 
        | 'semispinalis' 
        | 'erectorSpinae' 
        | 'multifidus' 
;


/**
 * Check if a given object implements the MuscleData interface.
 */
export function instanceOfMuscleData(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "muscle" in value;
    isInstance = isInstance && "targetLevel" in value;

    return isInstance;
}

export function MuscleDataFromJSON(json: any): MuscleData {
    return MuscleDataFromJSONTyped(json, false);
}

export function MuscleDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): MuscleData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'muscle': json['muscle'],
        'group': !exists(json, 'group') ? undefined : MuscleGroupFromJSON(json['group']),
        'area': !exists(json, 'area') ? undefined : MuscleAreaFromJSON(json['area']),
        'targetLevel': MuscleTargetLevelFromJSON(json['targetLevel']),
    };
}

export function MuscleDataToJSON(value?: MuscleData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'muscle': value.muscle,
        'group': MuscleGroupToJSON(value.group),
        'area': MuscleAreaToJSON(value.area),
        'targetLevel': MuscleTargetLevelToJSON(value.targetLevel),
    };
}

